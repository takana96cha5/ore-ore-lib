大規模ソフトウェアテスト
一般的なソフトウェア開発と同様に、ソフトウェアテストは、ソフトウェア工学の原則に準拠した体系的な手順に従う必要があります。
テストは、費用対効果が高く、開発プロセスに有用である必要があります。

テストコードは、実装コードとは分けられ、かつ実装者以外の開発者によって書かれることが推奨されています。
テスト前は、設計と要求仕様を理解し、可能な限り定量化できる方法で文書化しておく必要があります。
つまり、テストコードの大部分は実装前に書くことができます。
そのため、実装とテストの両方において、できるだけ簡単かつ柔軟にテストが可能なように設計を組む必要があります。

プロジェクトの規模にもよりますが、
テストプロセスは多くの階層での手順を踏むことになります。
以前の生命体の例に戻ると、
ソフトウェア内の異なる階層に対して異なるテストが行われることが想像できるでしょう。

階層       生命          ソフトウェア                                     戦略
高         生命体        ソフトウェア製品全体                              受入テスト/統合テスト
中         器官/組織     モジュール、クラス、オブジェクト、メソッド、関数     ユニットテスト
低         細胞/分子     数行のコード(行)                                 一般的なソフトウェアテスト
基礎       原子          単一のコード(行)                                  エラーチェック

テストは関数やクラスのように、
目的のあるユニットやソフトウェアのコンポーネントに対して行われることが推奨されています。

個々のコンポーネントのテスト（ユニットテスト）、
コンポーネント間のインターフェースのテスト（統合テスト）、
システム全体が実世界や顧客データを使用するテスト（受入テスト）
のような順で実際のテストが行われます。

「エラーの発見」→「コードや設計の変更」このプロセスを、エラーがなくなるまで何度も行います。
一度作成されたテストは、ソフトウェアの健全性をチェックするために何度も再利用されます。


ユニットテスト、統合テスト
では、多くのプロジェクトで必ず行われるユニットテストから見ていきましょう。


ユニットテスト
ソフトウェアプロジェクトの最下層のユニットテスト（unit testing）では、
関数、メソッド、オブジェクト、クラスなどの
ソフトウェアプロジェクトの個々のコンポーネントのエラーを特定することができます。
ほとんどのソフトウェアプロジェクトのテストはユニットテストから始まります。

ユニットテストには、ブラックボックステストとホワイトボックステストの組み合わせが含まれますが、
ユニットテストは通常、入出力関係に焦点を当てているため、ブラックボックステストに重点が置かれます。

コンポーネントがテストされると、
コンポーネントが大規模なプログラムに
エラーが発生させないことを保証することができるので、
後にコンポーネントに変更が加えられたとしても、
同じユニットテストを再利用することで、
意図した通りに動作することを確認できます。

各ユニットテストはテストケースと期待値を比較する複数のテストによって構成されています。
各コンポーネントのテストケースのセットが選択された後は、
コンポーネントが期待通りに動作し、
エラーがないかどうか判断します。
前述したように、多くのテストケースの多くでは、
オリジナルの要件や設計仕様の一部に基づいており、
コードが書かれる前に決定されることが推奨されています。

ユニットテストの原則について説明してきましたが、
オブジェクトやクラスのユニットテストには、
いくつかの追加の考慮事項があります。
オブジェクトの組み込まれた各メソッドと格納された値が
意図した通りに動作することを確認するときは、
ホワイトボックステストが適用されます。
ホワイトボックステストでは全てのステートメントを通ることで、エラーを特定します。
テストケースが決まれば、問題のコードを実行し、入出力関係がチェックされます。

統合テスト
ユニットテストを終えた後は、
個々のコンポーネントが意図した通りに動作することは保証されます。
しかし、それらのコンポーネント（関数、メソッド、オブジェクト、クラス）を
組み合わせてより大きなプログラムを作るとき、
新たなエラーが発生する可能性があります。


統合テスト（integration testing）とは、
ユニットテストより高い階層で行われるテストであり、
コンポーネントを組み合わせたときに発生するエラーをテストすることができます。
統合テストはソフトウェア設計の意思決定に対して影響を及ぼし、
個々のコンポーネントのレベルよりも、
より高い階層の視点によって行われます。

多くのケースでは、プロジェクトに各コンポーネントを追加しながら統合テストを行うことが良い戦略とされます。
統合テストには、トップダウンとボトムアップの 2 つのアプローチがあります。

「トップダウン」では、「メイン」関数やメソッドで定義されている、
主要制御経路から制御フローをたどり、
上の階層から下の階層にかけてテストが実行されます。

「ボトムアップ」では最下層のコンポーネントを最初に実行してテストが行われます。
関連するコンポーネントは、グループ化され、
コードの各セクションが期待通りに動作するかどうかを示すブーリアン値を出力します。

統合テストは低階層から始まり、最高階層のテストが実行されるまで順に行われます。

ボトムアップテストは多くの場合、望ましい方法とされますが、
トップダウンテストのように、
作業プログラム全体の考え方を捉えることはできないことは注意しなければなりません。


受入テスト
階層の最後にある受入テスト（acceptance testing）は、
開発者が直接行うものではありません。
受入テストでは、ソフトウェア製品全体がクライアントに渡され、
クライアントが独自の評価を行います。
受入テストは、開発チームやテストチームからの入力ではなく、
ソフトウェアが使用される実際の環境からの入力を伴うため、
非常に重要なプロセスになります。

開発環境以外の環境でプロダクトのテストを行うことになるので、
新しいエラーの発見に繋がります。
受入テストの結果によって、クライアントは製品の合否を判断し、
チームはその結果に基づいて新しい開発のイテレーションに移行します。


ビジュアル(UI)テスト
アプリケーションがすべての正しい要素、
正しいコンテンツを生成しているにもかかわらず、
UIが崩れている場合はどうしたらよいでしょうか。

ソフトウェアが何らかの視覚的な出力を生成する場合、
ビジュアルテストを行います。
ビジュアルテストでは、
レンダリングされた出力と目標の外観と照らし合わせてチェックします。

ビジュアルテストはウェブアプリケーションでは一般的に行うテストで、
ビジュアルモックアップのスクリーンショットのセットに基づいて、
各ページを個別にチェックが行われます。
ビジュアルテストツールでは、実際のアプリケーションをすべての状態で実行され、
各スクリーンショットに対してビジュアルのテストが行われます。


インストゥルメント化テスト
特定のハードウェア環境で動作するように開発されたソフトウェアでは、
インストゥルメント化テストを行うことで、
ソフトウェアが特定の環境下で動作することを確認することができます。
実際にソフトウェアを使う環境とは異なる、一般的な仮想環境で動作させるのではなく、
インストゥルメント化テストはソフトウェアが動作する実際の環境、
または適切なエミュレーションの中でソフトウェアのテストが行われます。
つまり、インストゥルメント化テストとは、
物理デバイスやエミュレータを使用して行う、テストのことです。
環境の差異とは、ブラウザ毎の差異や、OS毎の差異や、PCやスマホの差異などがあげられます。

例えば、組み込み型のスマートウォッチ環境で動作するソフトウェアについて考えてみましょう。
実際の環境がソフトウェアが開発されている環境とは全く異なるハードウェア
となってしまう可能性があります。
つまり、スマートウォッチのメモリの構成が異なっていたり、
プロセッサが開発者が使用しているフルサイズのコンピュータのプロセッサとは
異なる形式で機械語の命令を受けているようなケースです。
このようなケースの場合、
スマートウォッチのハードウェアをソフトウェアでエミュレーションした状態で
インストゥルメント化テストを行います。

もう1つの例を考えてみましょう。
今、タッチスクリーンが含まれたソフトウェアの開発を行っていると仮定します。
ソフトウェアが正しく書かれているかどうかをテストするためには、
信号がタッチスクリーンのハードウェアによって生成され、
イベントをトリガーするかどうかを確かめる必要があります。
このケースでは、実際のタッチスクリーンを使ってインストゥルメント化テストを行います。


ソフトウェアテストが行われる順番として最も適切なものを、次の選択肢の中から一つ選べ。

ユニットテスト → 統合テスト → 受入テスト

関数、メソッド、オブジェクト、クラスなどの、
ソフトウェアプロジェクトの個々のコンポーネントのエラーを特定するテストを
ユニットテストという。

ユニットテストより高い階層で行われ、
コンポーネントを組み合わせたときに発生するエラーを特定するテストを
統合テストという。

ソフトウェア製品全体がクライアントに渡され、
クライアントが独自の評価を行うテストのことを受入テストという。

ソフトウェアが何らかの視覚的な出力を生成する場合、
レンダリングされた出力と目標の外観と照らし合わせるテストのことを
ビジュアル(UI)テストという。

ソフトウェアが動作する実際の環境、
または適切なエミュレーションの中で行うソフトウェアのテストのことを
インストゥルメント化テストという。
